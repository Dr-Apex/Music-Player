{"version":3,"sources":["context/MusicContext.js","components/Controls.js","components/TrackList.js","components/MusicPlayer.js","history.js","components/PlayList.js","components/App.js","registerServiceWorker.js","index.js"],"names":["MusicContext","React","createContext","MusicProvider","Provider","Controls","playing","handleClick","useContext","className","id","onClick","e","target","TrackList","dataTrack","currentTrackIndex","selectTrackNumber","useState","tracks","setTracks","tracksList","setTracksList","activeTrack","setActiveTrack","data","useEffect","topOfTrackList","scrollTop","bottomOfTrackList","clientHeight","positionOfSelected","offsetTop","componentDidUpdate","trackks","map","trackClass","key","ref","cur","title","duration","input","MusicPlayer","setPlaying","setCurrentTrackIndex","audioElement","setAudioElement","playAudio","a","load","play","to","style","backgroundImage","audio","src","value","type","pause","currentIndex","recentIndex","length","trackId","createBrowserHistory","PlayList","marginTop","fontSize","cursor","display","history","push","float","marginRight","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.054357a1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MusicContext = React.createContext();\r\n\r\nexport const MusicProvider = MusicContext.Provider;\r\n\r\nexport default MusicContext;\r\n","import React, { useContext } from 'react';\r\nimport MusicContext from '../context/MusicContext';\r\n\r\nconst Controls = ({playing}) => {\r\n  const handleClick = useContext(MusicContext);\r\n\r\n  return (\r\n    <div className=\"Controls\">\r\n      <i\r\n        id=\"prev\"\r\n        className=\"fa fa-fw fa-fast-backward\"\r\n        onClick={(e) => handleClick(e.target.id)}\r\n      />\r\n      {!playing &&\r\n        <i\r\n          id=\"play\"\r\n          onClick={(e) => handleClick(e.target.id)}\r\n          className=\"fa fa-fw fa-play\"\r\n        />}\r\n      {playing &&\r\n        <i\r\n          id=\"pause\"\r\n          onClick={(e) => handleClick(e.target.id)}\r\n          className=\"fa fa-fw fa-pause\"\r\n        />}\r\n      <i\r\n        id=\"next\"\r\n        className=\"fa fa-fw fa-fast-forward\"\r\n        onClick={(e) => handleClick(e.target.id)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport data from './tracks.json';\r\nimport MusicContext from '../context/MusicContext';\r\n\r\nconst TrackList = ({currentTrackIndex}) => {\r\n  const selectTrackNumber = useContext(MusicContext);\r\n  const [tracks, setTracks] = useState([]);\r\n  const [tracksList, setTracksList] = useState('');\r\n  const [activeTrack, setActiveTrack] = useState('');\r\n\r\n  const componentDidUpdate = (activeTrack) => {\r\n    let topOfTrackList = tracksList.scrollTop;\r\n    let bottomOfTrackList = tracksList.scrollTop + tracksList.clientHeight;\r\n    let positionOfSelected = activeTrack.offsetTop;\r\n    if (\r\n      topOfTrackList > positionOfSelected ||\r\n      bottomOfTrackList < positionOfSelected\r\n    ) {\r\n      tracksList.scrollTop = positionOfSelected;\r\n    }\r\n  };\r\n\r\n  let dataTrack = [];\r\n  dataTrack = data.tracks;\r\n\r\n  useEffect(() => {\r\n    setTracks(dataTrack);\r\n    componentDidUpdate(activeTrack);\r\n  }, [activeTrack]);\r\n\r\n  const renderListItem = (tracks) => {\r\n    let trackClass = currentTrackIndex === tracks.id\r\n      ? \"selected\"\r\n      : \"\";\r\n    return (\r\n      <li\r\n        key={tracks.id}\r\n        className={trackClass}\r\n        ref={cur => {\r\n          if (currentTrackIndex === tracks.id) {\r\n            setActiveTrack(cur);\r\n          }\r\n        }}\r\n        onClick={()=>{selectTrackNumber(tracks.id)}}\r\n      >\r\n        <div className=\"number\">{tracks.id}</div>\r\n        <div className=\"title\">{tracks.title}</div>\r\n        <div className=\"duration\">{tracks.duration}</div>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  let trackks = tracks.map(renderListItem);\r\n  return (\r\n    <ul className=\"TrackList\" ref={input => setTracksList(input)}>\r\n      {trackks}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TrackList;\r\n","import React, { useState } from 'react';\r\nimport data from './tracks.json';\r\nimport { Link } from 'react-router-dom';\r\nimport { MusicProvider } from '../context/MusicContext.js';\r\nimport Controls from './Controls';\r\nimport TrackList from './TrackList';\r\n\r\nconst MusicPlayer = () => {\r\n  const [playing, setPlaying] = useState(false);\r\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\r\n  const [audioElement, setAudioElement] = useState('');\r\n\r\n  const playAudio = async() => {\r\n    await audioElement.load();\r\n    audioElement.play();\r\n  };\r\n  const pauseAudio = () => {\r\n    audioElement.pause();\r\n  }\r\n  const selectTrackNumber = (trackId) => {\r\n    setCurrentTrackIndex(trackId);\r\n    setPlaying(true);\r\n    playAudio();\r\n  }\r\n  const handleClick = (type) => {\r\n    switch (type) {\r\n      case \"play\":\r\n        if (currentTrackIndex === 0) {\r\n          setCurrentTrackIndex(1);\r\n        }\r\n        setPlaying(true);\r\n        setCurrentTrackIndex(currentTrackIndex);\r\n        playAudio();\r\n        break;\r\n      case \"pause\":\r\n        setPlaying(false);\r\n        pauseAudio();\r\n        break;\r\n      case \"prev\":\r\n        let currentIndex = currentTrackIndex - 1;\r\n        if (currentIndex <= 0) {\r\n          setPlaying(null);\r\n          setCurrentTrackIndex(null);\r\n        } else {\r\n          setPlaying(true);\r\n          setCurrentTrackIndex(currentIndex);\r\n        }\r\n        playAudio();\r\n        break;\r\n      case \"next\":\r\n        let recentIndex = currentTrackIndex + 1;\r\n        if (recentIndex > data.tracks.length) {\r\n          setPlaying(null);\r\n          setCurrentTrackIndex(null);\r\n        } else {\r\n          setPlaying(true);\r\n          setCurrentTrackIndex(recentIndex);\r\n        }\r\n        playAudio();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Link to={`/music/playlist`} className=\"btn\">|||</Link>\r\n      <div className=\"Artwork\" style={{ backgroundImage: \"url(logo192.png)\" }}>\r\n        <audio ref={(audio) => setAudioElement(audio)} src={\"/songs/\"+currentTrackIndex+\".mp3\"}/>\r\n        <MusicProvider value={handleClick}>\r\n          <Controls playing={playing} />\r\n        </MusicProvider>\r\n      </div>\r\n      <MusicProvider value={selectTrackNumber}>\r\n        <TrackList currentTrackIndex={currentTrackIndex} />\r\n      </MusicProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MusicPlayer;\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();\r\n","import React from 'react';\r\nimport data from './tracks.json';\r\nimport './PlayList.css';\r\nimport history from '../history';\r\n\r\n\r\nconst PlayList = () => {\r\n  let tracks = [];\r\n  tracks = data.tracks;\r\n\r\n  const renderListItem = (tracks) => {\r\n    return (\r\n      <li\r\n        key={tracks.id}\r\n      >\r\n        <div className=\"number\">{tracks.id}</div>\r\n        <div className=\"title\">{tracks.title}</div>\r\n        <div className=\"duration\">{tracks.duration}</div>\r\n      </li>\r\n    );\r\n  };\r\n\r\n  let trackks = tracks.map(renderListItem);\r\n  return (\r\n    <div className=\"list\">\r\n      <div\r\n        style={{ marginTop: \"9px\", fontSize: \"18px\", cursor: \"pointer\", display: \"inline-block\" }}\r\n        onClick={() => history.push('/')}>|||</div>\r\n      <div style={{ fontSize: \"35px\", float: \"right\", marginRight: \"85px\" }}>Playlist</div>\r\n      <ul className=\"PlayList\">\r\n        {trackks}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayList;\r\n","import React from 'react';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport MusicPlayer from './MusicPlayer';\r\nimport PlayList from './PlayList';\r\nimport history from '../history';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Router history={history}>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route path=\"/\" exact component={MusicPlayer} />\r\n            <Route path=\"/music/playlist\" exact component={PlayList} />\r\n          </Switch>\r\n          <div className=\"MusicCredit\">React Music Player</div>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}